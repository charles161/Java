import java.util.Arrays;
import java.util.Scanner;


class PathCompressedWeightedQuickUnion {//linear time
	private int[] id;
	private int[] sz;
	public PathCompressedWeightedQuickUnion(int N) {
		this.id = new int[N];
		sz=new int[N];
		for(int i=0;i<N;i++) {
			this.id[i]=i;
			this.sz[i]=1;
		}
	}
	
	public boolean isConnected(int p,int q) {// to find is that p and q  have the same root
		return root(p)==root(q);// worst case scenario ends in N iterations
	}
	
	private int root(int a) {
		if(id[a]==a) {
			return a;
		}
		id[a]=id[id[a]];//path compression - pointing to grandparent
		return root(id[a]);
	}
	
	public void union(int p,int q) {// find root of p and q and then set id of p's root to id of q's root
		int rp=root(p);
		int rq=root(q);
		if(sz[p]>sz[q]) {
			id[rq]=rp;
			sz[rp]+=sz[rq];
		}
		else {
			id[rp]=rq;
			sz[rq]+=sz[rp];
		}
	}
	
	public int[] getId() {
		return id;
	}
	
	public int[] getSz() {
		return sz;
	}
}


class PathCompressedQuickUnion {// there are two path compressions done
	private int[] id;
	public PathCompressedQuickUnion(int N) {
		this.id = new int[N];
		for(int i=0;i<N;i++) {
			this.id[i]=i;
		}
	}
	
	public boolean isConnected(int p,int q) {// to find is that p and q  have the same root
		return root(p)==root(q);// worst case scenario ends in N iterations
	}
	
	private int root(int a) {
		if(id[a]==a) {
			return a;
		}
		id[a]=id[id[a]];//path compression - pointing to grandparent
		return root(id[a]);
	}
	
	public void union(int p,int q) {// find root of p and q and then set id of p's root to id of q's root
		int rp = root(p);
		int rq = root(q);
		id[p]=rp;//path compression
		id[q]=rq;
		
		id[root(p)]=root(q);// worst case scenario end in N+ iterations
		
	}
	
	public int[] getId() {
		return id;
	}
}

class WeightedQuickUnion {// both union and find are fast ... uses lazy approach... using trees
	private int[] id;
	private int[] sz;
	public WeightedQuickUnion(int N) {
		this.id = new int[N];
		sz=new int[N];
		for(int i=0;i<N;i++) {
			this.id[i]=i;
			this.sz[i]=1;
		}
	}
	
	public boolean isConnected(int p,int q) {// to find is that p and q  have the same root
		return root(p)==root(q);// worst case scenario ends in N iterations
	}
	
	private int root(int a) {
		if(id[a]==a) {
			return a;
		}
		return root(id[a]);
	}
	
	public void union(int p,int q) {// find root of p and q and then set id of p's root to id of q's root
		int rp=root(p);
		int rq=root(q);
		if(sz[p]>sz[q]) {
			id[rq]=rp;
			sz[rp]+=sz[rq];
		}
		else {
			id[rp]=rq;
			sz[rq]+=sz[rp];
		}
	}
	
	public int[] getId() {
		return id;
	}
	
	public int[] getSz() {
		return sz;
	}
}

class QuickUnion {// both union and find are fast ... uses lazy approach... using trees
	private int[] id;
	private int count=0;
	public QuickUnion(int N) {
		this.id = new int[N];
		for(int i=0;i<N;i++) {
			this.id[i]=i;
		}
	}
	
	public boolean isConnected(int p,int q) {// to find is that p and q  have the same root
		return root(p)==root(q);// worst case scenario ends in N iterations
	}
	
	private int root(int a) {
		count++;
		if(id[a]==a) {
			return a;
		}
		return root(id[a]);
	}
	
	public void union(int p,int q) {// find root of p and q and then set id of p's root to id of q's root
		id[root(p)]=root(q);// worst case scenario end in N+ iterations
	}
	
	public int[] getId() {
		return id;
	}
	
	public int getCount() {
		return count;
	}
}

class QuickFind {// union is slow and find is fast
	
	private int[] id;
	private int count=0;

	public QuickFind(int N) {
		this.id = new int[N];
		for(int i=0;i<N;i++) {
			this.id[i]=i;
		}
	}
	
	public boolean isConnected(int p,int q) {
		return this.id[p]==this.id[q];
	}
	
	public void union(int p,int q) {// time complexity is quadratic
		int pid=id[p];
		int qid=id[q];
		for(int i=0;i<id.length;i++) {
			count++;
			if(id[i]==pid)// instead of pid if u use id[p] its a mess
				id[i]=qid;
		}
	}
	
	public int[] getId() {
		return id;
	}
	
	public int getCount() {
		return count;
	}
}



public class Main {
	
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int N= scanner.nextInt();
		QuickFind uf = new QuickFind(N);
		while(scanner.hasNextInt()) {
			int p = scanner.nextInt();
			int q = scanner.nextInt();
			if(!uf.isConnected(p,q)) {
				uf.union(p,q);
				System.out.println("made connection "+p+"  "+q);
			}
		}
		scanner.close();
		System.out.println(Arrays.toString(uf.getId()));
		System.out.println(uf.getCount());
		//System.out.println(Arrays.toString(uf.getSz()));
	}

}
