import java.util.Scanner;

class QuickUnion {// both union and find are fast ... uses lazy approach... using trees
	private int[] id;
	public QuickUnion(int N) {
		this.id = new int[N];
		for(int i=0;i<N;i++) {
			this.id[i]=i;
		}
	}
	
	public boolean isConnected(int p,int q) {// to find is that p and q  have the same root
		return root(p)==root(q);
	}
	
	private int root(int a) {
		if(id[a]==a) {
			return a;
		}
		return root(id[a]);
	}
	
	public void union(int p,int q) {// find root of p and q and then set id of p's root to id of q's root
		id[root(q)]=root(p);
	}
}

class QuickFind {// union is slow and find is fast
	
	private int[] id;
	public QuickFind(int N) {
		this.id = new int[N];
		for(int i=0;i<N;i++) {
			this.id[i]=i;
		}
	}
	
	public boolean isConnected(int p,int q) {
		return this.id[p]==this.id[q];
	}
	
	public void union(int p,int q) {// time complexity is quadratic
		int pid=id[p];
		int qid=id[q];
		for(int i=0;i<id.length;i++) {
			if(id[i]==pid)// instead of pid if u use id[p] its a mess
				id[i]=qid;
		}
	}
}



public class Main {
	
	public static void main(String[] args) {
		
		Scanner scanner = new Scanner(System.in);
		int N= scanner.nextInt();
		QuickUnion uf = new QuickUnion(N);
		

		while(scanner.hasNextInt()) {
			

			int p = scanner.nextInt();
			int q = scanner.nextInt();
			if(!uf.isConnected(p,q)) {
				uf.union(p,q);
				System.out.println("made connection "+p+"  "+q);
			}
		}
		
		scanner.close();
	}

}
